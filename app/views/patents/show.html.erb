
<h1> this is the detail lookup page </h1> <br><br>
<li><%= link_to "繼續查下一筆", new_patent_path %></li>   <li><%= link_to "去歷史查詢列表", patents_path %> </li>
<li><%= link_to "編輯這一筆查詢，調整fetch的格子數" , edit_patent_path %></li> 
<table>
	<tr> 
		<td> 申請號 </td> <td><%= @patent.apply_no %></td>
	</tr>
	<tr>
		<td>專利範圍</td> <td> </td>
	</tr>
</table>
 <% relationship_parent %>
<ul class ="users"> 
<% @patent_scopy_by_item.each do |scope_item| %>
  <li>
  <%= scope_item  %> 
</li>
<% end %>

<hr>
<table class='table-bordered'>
<tr>
	<td> 第一欄位 </td>
	<td> sub 專利範圍 </td>
</tr>
	<% @patent_scopy_by_item.each do |item| %>
	<tr class="<%= column_color(item) %>">
		<td class='<%= column_color(item) %>'><font color='<%= column_color(item) %>'><%= left_slice(item)  %></td>
		<td><%= right_slice(item) %></td>
	</tr>
	<% end %>
</table>
<hr>
  <% relationship %>
  <%#  binding.pry %> 
<div class="row">
  <div class="col-md-4">

<table class='table-bordered'>
<tr>
  <td>請求項編號 </td>
  <td>此項目下，子附屬項編號LIST </td>
</tr>
<tr>
  <% @h.each do |key,value| %> 
  <td><%= key %> </td>
  <td><%= value.join(",") %></td>
</tr>
  <% end %> 
</table> 
</div>
<div class="col-md-2">  
<table class='table-bordered'>
<tr>
  <td>請求項編號 </td>
  <td>Parent Node No. </td>
  
</tr>
<tr>
  <% @parent.each do |key,value| %> 
  <td><%= key %> </td>
  <td><%= value.join("") %></td>
</tr>
  <% end %>
</table> 
 
  
</div>
<div class="col-md-2">
   <table class='table-bordered'>
    <tr>
      <td> 請求項編號  </td>
    <td>與前面項目，第一次重複的編號 </td>
    </tr>
    <tr>
      <% @repeat_no.from(1).each_with_index do |repeat_no , index| %> 
      <% if index+1 !=repeat_no && repeat_no != 1 %> 
      <td><%= index+1 %> </td>
      <td><%= repeat_no %></td>
       </tr> 
       <% end %>
      <% end %> 
  </table> 
</div>
<div class="col-md-4">
</div>
</ul> 

<br> 
    <div>
      <hr>
      <% @show_index = @parent.select {|k,v| v.empty? } %>
      <% @show_index.keys.each do |root| %> 
      <%= build_tree(root.to_s, @h) %>
      <br>
      <br>
      <% end %>
      
      <%# build_entire_tree(@h.keys[0].to_s, @h) %>
    </div>
<br>
<hr>
  
    <script type="text/javascript"> 


//
//
//
var treeData;

$.ajax({  
 //url: '97146873/json_tree', 
 url: '<%= "#{params[:id]}/json_tree" %>',
  type: 'GET',
  dataType: 'json',
  async: false, 
      success: function(datajson) {
      //console.log(datajson)
        treeData = datajson ;

      },
      error: function(datajson) {
      alert ("糟糕啊！！");
      }  
  });

// ************** Generate the tree diagram  *****************
var margin = {top: 20, right: 120, bottom: 20, left: 120},
  width = 1300 - margin.right - margin.left,
  height =1000 - margin.top - margin.bottom;
  
var i = 0,
  duration = 750,
  root;

var tree = d3.layout.tree()
  .size([height, width]);

var diagonal = d3.svg.diagonal()
  .projection(function(d) { return [d.y, d.x]; });

var svg = d3.select("body").append("svg")
  .attr("width", width + margin.right + margin.left)
  .attr("height", height + margin.top + margin.bottom)
  .append("g")
  .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

root = treeData[0];
root.x0 = height / 2;
root.y0 = 0;
  
update(root);

d3.select(self.frameElement).style("height", "1000px");

function update(source) {

  // Compute the new tree layout.
  var nodes = tree.nodes(root).reverse(),
    links = tree.links(nodes);

  // Normalize for fixed-depth.
  nodes.forEach(function(d) { d.y = d.depth * 180; });

  // Update the nodes…
  var node = svg.selectAll("g.node")
    .data(nodes, function(d) { return d.id || (d.id = ++i); });

  // Enter any new nodes at the parent's previous position.
  var nodeEnter = node.enter().append("g")
    .attr("class", "node")
    .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
    .on("click", click);

  nodeEnter.append("circle")
    .attr("r", 1e-6)
    .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

  nodeEnter.append("text")
    .attr("x", function(d) { return d.children || d._children ? -13 : 13; })
    .attr("dy", ".35em")
    .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
    .text(function(d) { return d.name; })
    .style("fill-opacity", 1e-6);

  // Transition nodes to their new position.
  var nodeUpdate = node.transition()
    .duration(duration)
    .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

  nodeUpdate.select("circle")
    .attr("r", 10)
    .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

  nodeUpdate.select("text")
    .style("fill-opacity", 1);

  // Transition exiting nodes to the parent's new position.
  var nodeExit = node.exit().transition()
    .duration(duration)
    .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
    .remove();

  nodeExit.select("circle")
    .attr("r", 1e-6);

  nodeExit.select("text")
    .style("fill-opacity", 1e-6);

  // Update the links…
  var link = svg.selectAll("path.link")
    .data(links, function(d) { return d.target.id; });

  // Enter any new links at the parent's previous position.
  link.enter().insert("path", "g")
    .attr("class", "link")
    .attr("d", function(d) {
    var o = {x: source.x0, y: source.y0};
    return diagonal({source: o, target: o});
    });

  // Transition links to their new position.
  link.transition()
    .duration(duration)
    .attr("d", diagonal);

  // Transition exiting nodes to the parent's new position.
  link.exit().transition()
    .duration(duration)
    .attr("d", function(d) {
    var o = {x: source.x, y: source.y};
    return diagonal({source: o, target: o});
    })
    .remove();

  // Stash the old positions for transition.
  nodes.forEach(function(d) {
  d.x0 = d.x;
  d.y0 = d.y;
  });
}

// Toggle children on click.
function click(d) {
  if (d.children) {
  d._children = d.children;
  d.children = null;
  } else {
  d.children = d._children;
  d._children = null;
  }
  update(d);
}
 
</script>

 
