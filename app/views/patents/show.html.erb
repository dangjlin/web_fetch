
<h1> this is the detail lookup page </h1> <br><br>
<li><%= link_to "繼續查下一筆", new_patent_path %></li>   <li><%= link_to "去歷史查詢列表", patents_path %> </li>
<li><%= link_to "編輯這一筆查詢，調整fetch的格子數" , edit_patent_path %></li> 
<table>
	<tr> 
		<td> 申請號 </td> <td><%= @patent.apply_no %></td>
	</tr>
	<tr>
		<td>專利範圍</td> <td> </td>
	</tr>
</table>
 <% relationship_parent %>
<ul class ="users"> 
<% @patent_scopy_by_item.each do |scope_item| %>
  <li>
  <%= scope_item  %> 
</li>
<% end %>

<hr>
<table class='table-bordered'>
<tr>
	<td> 第一欄位 </td>
	<td> sub 專利範圍 </td>
</tr>
	<% @patent_scopy_by_item.each do |item| %>
	<tr class="<%= column_color(item) %>">
		<td class='<%= column_color(item) %>'><font color='<%= column_color(item) %>'><%= left_slice(item)  %></td>
		<td><%= right_slice(item) %></td>
	</tr>
	<% end %>
</table>
<hr>
  <% relationship %>
  <%#  binding.pry %> 
<div class="row">
  <div class="col-md-4">

<table class='table-bordered'>
<tr>
  <td>請求項編號 </td>
  <td>此項目下，子附屬項編號LIST </td>
</tr>
<tr>
  <% @h.each do |key,value| %> 
  <td><%= key %> </td>
  <td><%= value.join(",") %></td>
</tr>
  <% end %> 
</table> 
</div>
<div class="col-md-2">  
<table class='table-bordered'>
<tr>
  <td>請求項編號 </td>
  <td>Parent Node No. </td>
  
</tr>
<tr>
  <% @parent.each do |key,value| %> 
  <td><%= key %> </td>
  <td><%= value.join("") %></td>
</tr>
  <% end %>
</table> 
 
  
</div>
<div class="col-md-2">
   <table class='table-bordered'>
    <tr>
      <td> 請求項編號  </td>
    <td>與前面項目，第一次重複的編號 </td>
    </tr>
    <tr>
      <% @repeat_no.from(1).each_with_index do |repeat_no , index| %> 
      <% if index+1 !=repeat_no && repeat_no != 1 %> 
      <td><%= index+1 %> </td>
      <td><%= repeat_no %></td>
       </tr> 
       <% end %>
      <% end %> 
  </table> 
</div>
<div class="col-md-4">
</div>
</ul> 

<br> 
    <div>
      <hr>
      <% @show_index = @parent.select {|k,v| v.empty? } %>
      <% @show_index.keys.each do |root| %> 
      <%= build_tree(root.to_s, @h) %>
      <br>
      <br>
      <% end %>
      
      <%# build_entire_tree(@h.keys[0].to_s, @h) %>
    </div>
<br>
<hr>
    <script type="text/javascript" src="http://dan-first-108350.apne1.nitrousbox.com/patents/101107780-5cbdc2ef-b4ca-4289-8d72-d6cb4eae4bc3/json_tree.json"></script>
    <script type="text/javascript"> 
    
  
  var Data; // a global

  var treeData = d3.json("http://dan-first-108350.apne1.nitrousbox.com/patents/101107780-5cbdc2ef-b4ca-4289-8d72-d6cb4eae4bc3/json_tree.json", function(json) {
    Data = json;
 // visualizeit();
});
  
 // var treeData = read_json() ;

// ************** Generate the tree diagram  *****************
var margin = {top: 20, right: 120, bottom: 20, left: 120},
 width = 960 - margin.right - margin.left,
 height = 500 - margin.top - margin.bottom;
 
var i = 0;

var tree = d3.layout.tree()
 .size([height, width]);

var diagonal = d3.svg.diagonal()
 .projection(function(d) { return [d.y, d.x]; });

var svg = d3.select("body").append("svg")
 .attr("width", width + margin.right + margin.left)
 .attr("height", height + margin.top + margin.bottom)
  .append("g")
 .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

root = treeData[0];
  
update(root);

function update(source) {

  // Compute the new tree layout.
  var nodes = tree.nodes(root).reverse(),
   links = tree.links(nodes);

  // Normalize for fixed-depth.
  nodes.forEach(function(d) { d.y = d.depth * 180; });

  // Declare the nodesâ€¦
  var node = svg.selectAll("g.node")
   .data(nodes, function(d) { return d.id || (d.id = ++i); });

  // Enter the nodes.
  var nodeEnter = node.enter().append("g")
   .attr("class", "node")
   .attr("transform", function(d) { 
    return "translate(" + d.y + "," + d.x + ")"; });

  nodeEnter.append("circle")
   .attr("r", 10)
   .style("fill", "#fff");

  nodeEnter.append("text")
   .attr("x", function(d) { 
    return d.children || d._children ? -13 : 13; })
   .attr("dy", ".35em")
   .attr("text-anchor", function(d) { 
    return d.children || d._children ? "end" : "start"; })
   .text(function(d) { return d.name; })
   .style("fill-opacity", 1);

  // Declare the linksâ€¦
  var link = svg.selectAll("path.link")
   .data(links, function(d) { return d.target.id; });

  // Enter the links.
  link.enter().insert("path", "g")
   .attr("class", "link")
   .attr("d", diagonal);

}
    </script>  
 
 
